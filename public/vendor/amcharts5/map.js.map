{"version":3,"sources":["webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/azimuthal.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/orthographic.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/equirectangular.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/conicEqualArea.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/cylindricalEqualArea.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/conic.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/albersUsa.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/albers.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/equalEarth.js","webpack://@amcharts/amcharts5/./node_modules/d3-geo/src/projection/naturalEarth1.js","webpack://@amcharts/amcharts5/./tmp/webpack/map.js"],"names":["angle","orthographicRaw","x","y","projection","scale","clipAngle","equirectangularRaw","lambda","phi","conicEqualAreaRaw","y0","y1","sy0","n","phi0","cosPhi0","forward","invert","cylindricalEqualAreaRaw","c","r0","project","r","r0y","l","pi","projectAt","phi1","m","p","parallels","_","arguments","length","center","z","sc","cc","cache","cacheStream","lower48Point","alaskaPoint","hawaiiPoint","point","lower48","conicEqualArea","translate","rotate","alaska","hawaii","pointStream","albersUsa","coordinates","reset","k","t","stream","streams","i","sphere","lineStart","lineEnd","polygonStart","polygonEnd","precision","clipExtent","fitExtent","extent","object","fit","fitSize","size","fitWidth","width","fitHeight","height","A1","A2","A3","A4","M","equalEarthRaw","l2","l6","naturalEarth1Raw","phi2","phi4","delta","am5map"],"mappings":"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","file":"map.js","sourcesContent":["import {asin, atan2, cos, sin, sqrt} from \"../math.js\";\n\nexport function azimuthalRaw(scale) {\n  return function(x, y) {\n    var cx = cos(x),\n        cy = cos(y),\n        k = scale(cx * cy);\n        if (k === Infinity) return [2, 0];\n    return [\n      k * cy * sin(x),\n      k * sin(y)\n    ];\n  }\n}\n\nexport function azimuthalInvert(angle) {\n  return function(x, y) {\n    var z = sqrt(x * x + y * y),\n        c = angle(z),\n        sc = sin(c),\n        cc = cos(c);\n    return [\n      atan2(x * sc, z * cc),\n      asin(z && y * sc / z)\n    ];\n  }\n}\n","import {asin, cos, epsilon, sin} from \"../math.js\";\nimport {azimuthalInvert} from \"./azimuthal.js\";\nimport projection from \"./index.js\";\n\nexport function orthographicRaw(x, y) {\n  return [cos(y) * sin(x), sin(y)];\n}\n\northographicRaw.invert = azimuthalInvert(asin);\n\nexport default function() {\n  return projection(orthographicRaw)\n      .scale(249.5)\n      .clipAngle(90 + epsilon);\n}\n","import projection from \"./index.js\";\n\nexport function equirectangularRaw(lambda, phi) {\n  return [lambda, phi];\n}\n\nequirectangularRaw.invert = equirectangularRaw;\n\nexport default function() {\n  return projection(equirectangularRaw)\n      .scale(152.63);\n}\n","import {abs, asin, atan2, cos, epsilon, pi, sign, sin, sqrt} from \"../math.js\";\nimport {conicProjection} from \"./conic.js\";\nimport {cylindricalEqualAreaRaw} from \"./cylindricalEqualArea.js\";\n\nexport function conicEqualAreaRaw(y0, y1) {\n  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;\n\n  // Are the parallels symmetrical around the Equator?\n  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);\n\n  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;\n\n  function project(x, y) {\n    var r = sqrt(c - 2 * n * sin(y)) / n;\n    return [r * sin(x *= n), r0 - r * cos(x)];\n  }\n\n  project.invert = function(x, y) {\n    var r0y = r0 - y,\n        l = atan2(x, abs(r0y)) * sign(r0y);\n    if (r0y * n < 0)\n      l -= pi * sign(x) * sign(r0y);\n    return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];\n  };\n\n  return project;\n}\n\nexport default function() {\n  return conicProjection(conicEqualAreaRaw)\n      .scale(155.424)\n      .center([0, 33.6442]);\n}\n","import {asin, cos, sin} from \"../math.js\";\n\nexport function cylindricalEqualAreaRaw(phi0) {\n  var cosPhi0 = cos(phi0);\n\n  function forward(lambda, phi) {\n    return [lambda * cosPhi0, sin(phi) / cosPhi0];\n  }\n\n  forward.invert = function(x, y) {\n    return [x / cosPhi0, asin(y * cosPhi0)];\n  };\n\n  return forward;\n}\n","import {degrees, pi, radians} from \"../math.js\";\nimport {projectionMutator} from \"./index.js\";\n\nexport function conicProjection(projectAt) {\n  var phi0 = 0,\n      phi1 = pi / 3,\n      m = projectionMutator(projectAt),\n      p = m(phi0, phi1);\n\n  p.parallels = function(_) {\n    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];\n  };\n\n  return p;\n}\n","import {epsilon} from \"../math.js\";\nimport albers from \"./albers.js\";\nimport conicEqualArea from \"./conicEqualArea.js\";\nimport {fitExtent, fitSize, fitWidth, fitHeight} from \"./fit.js\";\n\n// The projections must have mutually exclusive clip regions on the sphere,\n// as this will avoid emitting interleaving lines and polygons.\nfunction multiplex(streams) {\n  var n = streams.length;\n  return {\n    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },\n    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },\n    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },\n    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },\n    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },\n    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }\n  };\n}\n\n// A composite projection for the United States, configured by default for\n// 960×500. The projection also works quite well at 960×600 if you change the\n// scale to 1285 and adjust the translate accordingly. The set of standard\n// parallels for each region comes from USGS, which is published here:\n// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers\nexport default function() {\n  var cache,\n      cacheStream,\n      lower48 = albers(), lower48Point,\n      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338\n      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007\n      point, pointStream = {point: function(x, y) { point = [x, y]; }};\n\n  function albersUsa(coordinates) {\n    var x = coordinates[0], y = coordinates[1];\n    return point = null,\n        (lower48Point.point(x, y), point)\n        || (alaskaPoint.point(x, y), point)\n        || (hawaiiPoint.point(x, y), point);\n  }\n\n  albersUsa.invert = function(coordinates) {\n    var k = lower48.scale(),\n        t = lower48.translate(),\n        x = (coordinates[0] - t[0]) / k,\n        y = (coordinates[1] - t[1]) / k;\n    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska\n        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii\n        : lower48).invert(coordinates);\n  };\n\n  albersUsa.stream = function(stream) {\n    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);\n  };\n\n  albersUsa.precision = function(_) {\n    if (!arguments.length) return lower48.precision();\n    lower48.precision(_), alaska.precision(_), hawaii.precision(_);\n    return reset();\n  };\n\n  albersUsa.scale = function(_) {\n    if (!arguments.length) return lower48.scale();\n    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);\n    return albersUsa.translate(lower48.translate());\n  };\n\n  albersUsa.translate = function(_) {\n    if (!arguments.length) return lower48.translate();\n    var k = lower48.scale(), x = +_[0], y = +_[1];\n\n    lower48Point = lower48\n        .translate(_)\n        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])\n        .stream(pointStream);\n\n    alaskaPoint = alaska\n        .translate([x - 0.307 * k, y + 0.201 * k])\n        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    hawaiiPoint = hawaii\n        .translate([x - 0.205 * k, y + 0.212 * k])\n        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])\n        .stream(pointStream);\n\n    return reset();\n  };\n\n  albersUsa.fitExtent = function(extent, object) {\n    return fitExtent(albersUsa, extent, object);\n  };\n\n  albersUsa.fitSize = function(size, object) {\n    return fitSize(albersUsa, size, object);\n  };\n\n  albersUsa.fitWidth = function(width, object) {\n    return fitWidth(albersUsa, width, object);\n  };\n\n  albersUsa.fitHeight = function(height, object) {\n    return fitHeight(albersUsa, height, object);\n  };\n\n  function reset() {\n    cache = cacheStream = null;\n    return albersUsa;\n  }\n\n  return albersUsa.scale(1070);\n}\n","import conicEqualArea from \"./conicEqualArea.js\";\n\nexport default function() {\n  return conicEqualArea()\n      .parallels([29.5, 45.5])\n      .scale(1070)\n      .translate([480, 250])\n      .rotate([96, 0])\n      .center([-0.6, 38.7]);\n}\n","import projection from \"./index.js\";\nimport {abs, asin, cos, epsilon2, sin, sqrt} from \"../math.js\";\n\nvar A1 = 1.340264,\n    A2 = -0.081106,\n    A3 = 0.000893,\n    A4 = 0.003796,\n    M = sqrt(3) / 2,\n    iterations = 12;\n\nexport function equalEarthRaw(lambda, phi) {\n  var l = asin(M * sin(phi)), l2 = l * l, l6 = l2 * l2 * l2;\n  return [\n    lambda * cos(l) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),\n    l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2))\n  ];\n}\n\nequalEarthRaw.invert = function(x, y) {\n  var l = y, l2 = l * l, l6 = l2 * l2 * l2;\n  for (var i = 0, delta, fy, fpy; i < iterations; ++i) {\n    fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y;\n    fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2);\n    l -= delta = fy / fpy, l2 = l * l, l6 = l2 * l2 * l2;\n    if (abs(delta) < epsilon2) break;\n  }\n  return [\n    M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)) / cos(l),\n    asin(sin(l) / M)\n  ];\n};\n\nexport default function() {\n  return projection(equalEarthRaw)\n      .scale(177.158);\n}\n","import projection from \"./index.js\";\nimport {abs, epsilon} from \"../math.js\";\n\nexport function naturalEarth1Raw(lambda, phi) {\n  var phi2 = phi * phi, phi4 = phi2 * phi2;\n  return [\n    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),\n    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))\n  ];\n}\n\nnaturalEarth1Raw.invert = function(x, y) {\n  var phi = y, i = 25, delta;\n  do {\n    var phi2 = phi * phi, phi4 = phi2 * phi2;\n    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /\n        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));\n  } while (abs(delta) > epsilon && --i > 0);\n  return [\n    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),\n    phi\n  ];\n};\n\nexport default function() {\n  return projection(naturalEarth1Raw)\n      .scale(175.295);\n}\n","import * as m from \"./../../dist/es2015/map.js\";\nexport const am5map = m;"],"sourceRoot":""}